cmake_minimum_required(VERSION ${CMAKE_VERSION})
project(${_JEGP_TARGET} LANGUAGES CXX)

macro(scan_requirements)
  file(READ ${_JEGP_REQUIREMENTS_FILE} requirements)
  while(requirements)
    list(POP_FRONT requirements req)

    cmake_path(IS_ABSOLUTE req is_absolute)
    if(is_absolute)
      set(include_dir "${req}")
      list(POP_FRONT requirements target)
      list(APPEND targets ${target})
    else()
      list(APPEND ${target}_headers "${include_dir}/${req}")
    endif()
  endwhile()
endmacro()

macro(add_enforcements)
  foreach(tgt IN LISTS targets)
    string(MAKE_C_IDENTIFIER "${tgt}_test_headers" target_name)
    add_library(${target_name} OBJECT ${${tgt}_headers})
    target_link_libraries(${target_name} PRIVATE ${tgt})
  endforeach()
endmacro()

scan_requirements()
find_package(${_JEGP_PROJECT} REQUIRED COMPONENTS utilities CONFIG PATHS ${_JEGP_PROJECT_BINARY_DIR} NO_DEFAULT_PATH)
add_enforcements()
