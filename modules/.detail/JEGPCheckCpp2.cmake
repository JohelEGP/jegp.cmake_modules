include_guard(GLOBAL)

file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/JEGPCpp2")
file(WRITE "${CMAKE_BINARY_DIR}/JEGPCpp2/_jegp_test.cpp2" [[main: () -> int = 0;]])

set(generate_command "${JEGP_CXX2_COMPILER}" "${JEGP_CXX2_FLAGS}" "${CMAKE_BINARY_DIR}/JEGPCpp2/_jegp_test.cpp2")
execute_process(COMMAND ${generate_command} WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/JEGPCpp2" RESULT_VARIABLE generated
                ERROR_VARIABLE generation_error)
if(NOT generated EQUAL 0)
  message(FATAL_ERROR
            "Could not compile a simple Cpp2 source file.
Command: ${generate_command}
Variables:
- JEGP_CXX2_COMPILER=${JEGP_CXX2_COMPILER}
- JEGP_CXX2_FLAGS=${JEGP_CXX2_FLAGS}
Command result: ${generated}
Command output: ${generation_error}")
endif()

set(CMAKE_TRY_COMPILE_TARGET_TYPE EXECUTABLE)
# cmake-format: off
try_compile(
  built "${CMAKE_BINARY_DIR}/JEGPCpp2"
  "${CMAKE_BINARY_DIR}/JEGPCpp2/_jegp_test.cpp"
  CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${JEGP_CPPFRONT_INCLUDE_DIRECTORIES}"
  OUTPUT_VARIABLE build_output
  CXX_STANDARD 20
  CXX_STANDARD_REQUIRED YES
  CXX_EXTENSIONS NO) # cmake-format: on
if(NOT built)
  message(FATAL_ERROR
            "Could not compile a simple, generated Cpp1 source file.
Source file: ${CMAKE_BINARY_DIR}/JEGPCpp2/_jegp_test.cpp
Variables:
- JEGP_CPPFRONT_INCLUDE_DIRECTORIES=${JEGP_CPPFRONT_INCLUDE_DIRECTORIES}
Command output: ${build_output}")
endif()

set(JEGP_CXX2_COMPILER "${JEGP_CXX2_COMPILER}" CACHE FILEPATH "The full path to the compiler for Cpp2.")
set(JEGP_CXX2_FLAGS "${JEGP_CXX2_FLAGS}" CACHE STRING "Cpp2 flags.")
set(JEGP_CPPFRONT_INCLUDE_DIRECTORIES "${JEGP_CPPFRONT_INCLUDE_DIRECTORIES}"
    CACHE FILEPATH
          "List of preprocessor include file search directories for Cpp1 source files generated by `cppfront`.")
